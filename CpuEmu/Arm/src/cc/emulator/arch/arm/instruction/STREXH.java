package cc.emulator.arch.arm.instruction;

import cc.emulator.core.cpu.Instruction;

/**
 * STREXH
 * Store Register Exclusive Halfword derives an address from a base register value, stores a halfword from a register
 * to memory if the executing processor has exclusive access to the memory addressed, and returns a status word that
 * indicates whether this store was performed.
 * For more information about support for shared memory see Synchronization and semaphores on page A3-114. For
 * information about memory accesses see Memory accesses on page A8-294.
 *
 * Encoding T1 ARMv7
 *  STREXH<c> <Rd>, <Rt>, [<Rn>]
 *
 * d = UInt(Rd); t = UInt(Rt); n = UInt(Rn);
 * if d IN {13,15} || t IN {13,15} || n == 15 then UNPREDICTABLE;
 * if d == n || d == t then UNPREDICTABLE;
 *
 * Encoding A1 ARMv6K, ARMv7
 *  STREXH<c> <Rd>, <Rt>, [<Rn>]
 *
 * For the case when cond is 0b1111, see Unconditional instructions on page A5-216.
 * d = UInt(Rd); t = UInt(Rt); n = UInt(Rn);
 * if d == 15 || t == 15 || n == 15 then UNPREDICTABLE;
 * if d == n || d == t then UNPREDICTABLE;
 *
 *
 * Assembler syntax
 *      STREXH{<c>}{<q>} <Rd>, <Rt>, [<Rn>]
 * where:
 *  <c>, <q>    See Standard assembler syntax fields on page A8-287.
 *              <Rd> The destination register for the returned status value. The value returned is:
 *              0 if the operation updates memory
 *              1 if the operation fails to update memory.
 *  <Rt>        The source register.
 *  <Rn>        The base register. The SP can be used.
 * Operation
 *  if ConditionPassed() then
 *      EncodingSpecificOperations(); NullCheckIfThumbEE(n);
 *      address = R[n];
 *      if ExclusiveMonitorsPass(address,2) then
 *          MemA[address,2] = R[t]<15:0>;
 *          R[d] = ZeroExtend(‘0’, 32);
 *      else
 *          R[d] = ZeroExtend(‘1’, 32);
 * Exceptions
 *  Data Abort.
 *
 * Aborts and alignment
 * If a synchronous Data Abort exception is generated by the execution of this instruction:
 * . memory is not updated
 * . <Rd> is not updated.
 * In ARMv7, a non halfword-aligned memory address causes an Alignment fault Data Abort exception to be
 * generated, subject to the following rules:
 * . If ExclusiveMonitorsPass() returns TRUE, the exception is generated.
 * ?. Otherwise, it is IMPLEMENTATION DEFINED whether the exception is generated.
 * If ExclusiveMonitorsPass() returns FALSE and the memory address, if accessed, would generate a synchronous Data
 * Abort exception, it is IMPLEMENTATION DEFINED whether the exception is generated.
 * Note
 * In ARMv6K:
 * . If SCTLR.A and SCTLR.U are both 0, a non halfword-aligned memory address causes UNPREDICTABLE behavior.
 * . Otherwise, the ARMv7 behavior applies.
 *
 *
 * @author Shao Yongqing
 * Date: 2017/10/17.
 */
public class STREXH extends StoreRegisterExclusive  {
    public STREXH(int rawInstruction) {
        super(rawInstruction);
    }
    @Override
    protected int getOp(){
        return 0b1110;
    }

}

package cc.emulator.arch.arm.instruction;

import cc.emulator.core.cpu.Instruction;

/**
 * STREXB
 * Store Register Exclusive Byte derives an address from a base register value, stores a byte from a register to memory
 * if the executing processor has exclusive access to the memory addressed, and returns a status word that indicates
 * whether this store was performed.
 * For more information about support for shared memory see Synchronization and semaphores on page A3-114. For
 * information about memory accesses see Memory accesses on page A8-294.
 *
 * Encoding T1 ARMv7
 * STREXB<c> <Rd>, <Rt>, [<Rn>]
 *
 * -------------------------------------------------------------------------------------------------
 * |15 14 13 12|11|10| 9| 8| 7| 6| 5| 4| 3| 2  1  0|15 14|13|12|11|10  9  8| 7| 6| 5| 4| 3  2  1  0|
 * |--------------+--+--+-----------+--|-----------|-----------|-----------------------------------|
 * | 1  1  1  0  1| 0  0| 0| 1| 1| 0| 0|   Rn      |  Rt       |(1)(1)(1)(1| 0  1  0  0|  Rd       |
 * |--------------+--+--+-----------+--|-----------|-----------|-----------------------------------|
 *
 * d = UInt(Rd); t = UInt(Rt); n = UInt(Rn);
 * if d IN {13,15} || t IN {13,15} || n == 15 then UNPREDICTABLE;
 * if d == n || d == t then UNPREDICTABLE;
 *
 * |31 30 29 28|27|26|25|24 23|22|21|20|19 18 17 16|15 14 13 12|11 10  9  8| 7  6  5  4| 3  2  1  0|Instruction Type
 * |-----------|--+--+--+-----------+--|-----------|-----------|-----------------------------------|-----------------
 * | Condition | 0| 0| 0| 1| 1| 1| 0| 0|   Rn      |  Rd       |(1)(1)(1)(1| 1  0  0  1|  Rt       |  STREXB
 * |-----------|--+--+--+--+-----------|-----------|-----------|-----------------------------------|-----------------
 *
 *
 * Encoding A1 ARMv6K, ARMv7
 * STREXB<c> <Rd>, <Rt>, [<Rn>]
 *
 * For the case when cond is 0b1111, see Unconditional instructions on page A5-216.
 * d = UInt(Rd); t = UInt(Rt); n = UInt(Rn);
 * if d == 15 || t == 15 || n == 15 then UNPREDICTABLE;
 * if d == n || d == t then UNPREDICTABLE;
 *
 *
 * Assembler syntax
 *      STREXB{<c>}{<q>} <Rd>, <Rt>, [<Rn>]
 * where:
 *  <c>, <q>    See Standard assembler syntax fields on page A8-287.
 *  <Rd>        The destination register for the returned status value. The value returned is:
 *              0 if the operation updates memory
 *              1 if the operation fails to update memory.
 *  <Rt>        The source register.
 *  <Rn>        The base register. The SP can be used.
 * Operation
 *  if ConditionPassed() then
 *      EncodingSpecificOperations(); NullCheckIfThumbEE(n);
 *      address = R[n];
 *      if ExclusiveMonitorsPass(address,1) then
 *          MemA[address,1] = R[t]<7:0>;
 *          R[d] = ZeroExtend(‘0’, 32);
 *      else
 *          R[d] = ZeroExtend(‘1’, 32);
 * Exceptions
 *  Data Abort.
 *
 * Aborts
 * If a synchronous Data Abort exception is generated by the execution of this instruction:
 * . memory is not updated
 * . <Rd> is not updated.
 * If ExclusiveMonitorsPass() returns FALSE and the memory address, if accessed, would generate a synchronous Data
 * Abort exception, it is IMPLEMENTATION DEFINED whether the exception is generated.
 *
 * @author Shao Yongqing
 * Date: 2017/10/17.
 */
public class STREXB extends StoreRegisterExclusive  {
    public STREXB(int rawInstruction) {
        super(rawInstruction);
    }
    @Override
    protected int getOp(){
        return 0b1100;
    }

}

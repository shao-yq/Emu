package cc.emulator.arch.arm.instruction;

import cc.emulator.core.cpu.Instruction;

/**
 * STREXD
 * Store Register Exclusive Doubleword derives an address from a base register value, stores a 64-bit doubleword from
 * two registers to memory if the executing processor has exclusive access to the memory addressed, and returns a
 * status word that indicates whether this store was performed.
 * For more information about support for shared memory see Synchronization and semaphores on page A3-114. For
 * information about memory accesses see Memory accesses on page A8-294.
 *
 * Encoding T1 ARMv7
 *      STREXD<c> <Rd>, <Rt>, <Rt2>, [<Rn>]
 *
 * -------------------------------------------------------------------------------------------------
 * |15 14 13 12|11|10| 9| 8| 7| 6| 5| 4| 3| 2  1  0|15 14|13|12|11|10  9  8| 7| 6| 5| 4| 3  2  1  0|
 * |--------------+--+--+-----------+--|-----------|-----------|-----------------------------------|
 * | 1  1  1  0  1| 0  0| 0| 1| 1| 0| 0|   Rn      |  Rt       |   Rt2     | 0  1  1  1|  Rd       |
 * |--------------+--+--+-----------+--|-----------|-----------|-----------------------------------|
 *
 * d = UInt(Rd); t = UInt(Rt); t2 = UInt(Rt2); n = UInt(Rn);
 * if d IN {13,15} || t IN {13,15} || t2 IN {13,15} || n == 15 then UNPREDICTABLE;
 * if d == n || d == t || d == t2 then UNPREDICTABLE;
 *
 * Encoding A1 ARMv6K, ARMv7
 *      STREXD<c> <Rd>, <Rt>, <Rt2>, [<Rn>]
 *
 * |31 30 29 28|27|26|25|24 23|22|21|20|19 18 17 16|15 14 13 12|11 10  9  8| 7  6  5  4| 3  2  1  0|Instruction Type
 * |-----------|--+--+--+-----------+--|-----------|-----------|-----------------------------------|-----------------
 * | Condition | 0| 0| 0| 1| 1| 0| 1| 0|   Rn      |  Rd       |(1)(1)(1)(1| 1  0  0  1|  Rt       |  STREX
 * |-----------|--+--+--+--+-----------|-----------|-----------|-----------------------------------|-----------------
 *
 * For the case when cond is 0b1111, see Unconditional instructions on page A5-216.
 * d = UInt(Rd); t = UInt(Rt); t2 = t+1; n = UInt(Rn);
 * if d == 15 || Rt<0> == ‘1’ || Rt == ‘1110’ || n == 15 then UNPREDICTABLE;
 * if d == n || d == t || d == t2 then UNPREDICTABLE;
 *
 * Assembler syntax
 *  STREXD{<c>}{<q>} <Rd>, <Rt>, <Rt2>, [<Rn>]
 * where:
 *  <c>, <q>    See Standard assembler syntax fields on page A8-287.
 *  <Rd>        The destination register for the returned status value. The value returned is:
 *              0 if the operation updates memory
 *              1 if the operation fails to update memory.
 *  <Rd>        must not be the same as <Rn>, <Rt>, or <Rt2>.
 *  <Rt>        The first source register. For an ARM instruction, <Rt> must be even-numbered and not R14.
 *  <Rt2>       The second source register. For an ARM instruction, <Rt2> must be <R(t+1)>.
 *  <Rn>        The base register. The SP can be used.
 * Operation
 *  if ConditionPassed() then
 *      EncodingSpecificOperations(); NullCheckIfThumbEE(n);
 *      address = R[n];
 *      // For the alignment requirements see “Aborts and alignment”
 *      // Create doubleword to store such that R[t] will be stored at address and R[t2] at address+4.
 *      value = if BigEndian() then R[t]:R[t2] else R[t2]:R[t];
 *      if ExclusiveMonitorsPass(address,8) then
 *          MemA[address,8] = value;
 *          R[d] = ZeroExtend(‘0’, 32);
 *      else
 *          R[d] = ZeroExtend(‘1’, 32);
 * Exceptions
 *  Data Abort.
 *
 * Aborts and alignment
 * If a synchronous Data Abort exception is generated by the execution of this instruction:
 * . memory is not updated
 * . <Rd> is not updated.
 * In ARMv7, a non doubleword-aligned memory address causes an Alignment fault Data Abort exception to be
 * generated, subject to the following rules:
 * . If ExclusiveMonitorsPass() returns TRUE, the exception is generated.
 * . Otherwise, it is IMPLEMENTATION DEFINED whether the exception is generated.
 * If ExclusiveMonitorsPass() returns FALSE and the memory address, if accessed, would generate a synchronous Data
 * Abort exception, it is IMPLEMENTATION DEFINED whether the exception is generated.
 * Note
 * In ARMv6K:
 * . If SCTLR.A and SCTLR.U are both 0, a non doubleword-aligned memory address causes UNPREDICTABLE behavior.
 * . Otherwise, the ARMv7 behavior applies.
 *
 *
 * @author Shao Yongqing
 * Date: 2017/10/17.
 */
public class STREXD  extends StoreRegisterExclusive  {
    public STREXD(int rawInstruction) {
        super(rawInstruction);
    }
    @Override
    protected int getOp(){
        return 0b1010;
    }

}
